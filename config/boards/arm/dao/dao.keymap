/*
* Copyright (c) 2021 Rafael Yumagulov
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LR_MAIN_EN  0
#define LR_MAIN_RU  1
#define LR_NUMS     2
#define LR_WILDS    3
#define LR_NAV      4
#define LR_SERV     5
#define LR_GAME1    6
#define LR_GAME2    7
#define LR_GAME3    8

&lt { quick_tap_ms = <200>; };
&mt { quick-tap-ms = <400>; };
&sl { release-after-ms = <1000>; };

/ {
  macros {
    MR_LAYOUT_EN: MR_LAYOUT_EN {
      label = "ZM_MR_LAYOUT_EN";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
      // <&kp CAPS>;
      <&kp LA(LS(N8))>;
    };
    MR_LAYOUT_RU: MR_LAYOUT_RU {
      label = "ZM_MR_LAYOUT_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
      // <&kp LS(CAPS)>;
      <&kp LA(LS(N9))>;
    };
    MR_MAIN_EN: MR_MAIN_EN {
      label = "ZM_MR_MAIN_EN";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
      <&MR_LAYOUT_EN>,
      <&to LR_MAIN_EN>;
    };
    MR_MAIN_RU: MR_MAIN_RU {
      label = "ZM_MR_MAIN_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
      <&MR_LAYOUT_RU>,
      <&to LR_MAIN_RU>;
    };
    MR_WILDS_RU: MR_WILDS_RU {
      label = "ZM_MR_WILDS_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
      <&MR_LAYOUT_EN>,
      <&to LR_WILDS>,
      <&macro_pause_for_release>,
      <&to LR_MAIN_RU>,
      <&MR_LAYOUT_RU>;
    };
    MR_NUMBER_RU: MR_NUMBER_RU {
      label = "ZM_MR_NUMBER_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
      <&MR_LAYOUT_RU>,
      <&kp LS(N3)>,
      <&MR_LAYOUT_EN>;
    };
  };
};

/ {
  behaviors {
    MOD_EN_RU: MOD_EN_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_EN_RU";
      #binding-cells = <0>;
      bindings = <&MR_MAIN_EN>, <&MR_MAIN_RU>;
      mods = <(MOD_LCTL)>;
    };
    MOD_DOT_RU: MOD_DOT_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_DOT_RU";
      #binding-cells = <0>;
      bindings = <&mt DOT FSLH>, <&kp DOT>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    MOD_COMMA_RU: MOD_COMMA_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_COMMA_RU";
      #binding-cells = <0>;
      bindings = <&kp LS(FSLH)>, <&kp COMMA>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    MOD_LPAR_LT: MOD_LPAR_LT {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_LPAR_LT";
      #binding-cells = <0>;
      bindings = <&kp LPAR>, <&kp LT>;
      mods = <(MOD_LSFT)>;
    };
    MOD_RPAR_GT: MOD_RPAR_GT {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_RPAR_GT";
      #binding-cells = <0>;
      bindings = <&kp RPAR>, <&kp GT>;
      mods = <(MOD_LSFT)>;
    };
    MOD_LBRC_LBKT: MOD_LBRC_LBKT {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_LBRC_LBKT";
      #binding-cells = <0>;
      bindings = <&kp LBRC>, <&kp LBKT>;
      mods = <(MOD_LSFT)>;
    };
    MOD_RBRC_RBKT: MOD_RBRC_RBKT {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_RBRC_RBKT";
      #binding-cells = <0>;
      bindings = <&kp RBRC>, <&kp RBKT>;
      mods = <(MOD_LSFT)>;
    };
    MOD_FSLH_BSLH: MOD_FSLH_BSLH {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_FSLH_BSLH";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT)>;
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";
    // EN-RU layout: DOT + BSPC
    combo_bspc {
      timeout-ms = <50>;
      key-positions = <37 49>;
      layers = <LR_MAIN_EN LR_MAIN_RU LR_NUMS LR_WILDS LR_NAV>; 
      bindings = <&MOD_EN_RU>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";
    LR_MAIN_EN {
      bindings = <
        // row 1
&none   &kp ESC        &kp Q   &kp W   &kp E   &kp R   &kp T            &kp Y   &kp U   &kp I   &kp O   &kp P       &none   &none   
        // row 2
        &mt LWIN TAB   &kp A   &kp S   &kp D   &kp F   &kp G            &kp H   &kp J   &kp K   &kp L   &none       &kp BSPC
        // row 3
        &kp LCTRL      &kp Z   &kp X   &kp C   &kp V   &kp B            &kp N   &kp M   &none   &none   &kp COMMA   &kp DOT
        // thumb row
        &kp LALT   &kp LSHFT   &lt LR_NUMS SPACE                        &lt LR_NAV SPACE   &mo LR_WILDS   &lt LR_SERV ENTER        
      >;
    };
    
    LR_MAIN_RU {
      bindings = <
        // row 1
  &none   &trans   &mt GRAVE Q   &mt RBKT W   &kp E   &kp R   &kp T            &kp Y   &kp U   &kp I       &kp O     &kp P           &mt SQT LBKT   &trans
        // row 2
        &trans     &kp A         &kp S        &kp D   &kp F   &kp G            &kp H   &kp J   &kp K       &kp L     &kp SEMI        &trans
        // row 3
        &trans     &kp Z         &kp X        &kp C   &kp V   &kp B            &kp N   &kp M   &kp COMMA   &kp DOT   &MOD_COMMA_RU   &MOD_DOT_RU
        // thumb row
        &trans   &trans   &trans                                               &trans   &MR_WILDS_RU   &trans
      >;
    };
    
    LR_NUMS {
      bindings = <
        // row 1
&none   &trans   &none   &kp F7   &kp F8   &kp F9   &kp F10            &none   &kp N7   &kp N8   &kp N9   &none    &none   &trans
        // row 2
        &trans   &none   &kp F4   &kp F5   &kp F6   &kp F11            &none   &kp N4   &kp N5   &kp N6   &kp N0   &trans   
        // row 3
        &trans   &none   &kp F1   &kp F2   &kp F3   &kp F12            &none   &kp N1   &kp N2   &kp N3   &trans   &trans
        // thumb row
        &trans   &trans   &trans                                       &trans   &trans   &trans
      >;
    };
    
    LR_WILDS {
      bindings = <
        // row 1
&none   &kp GRAVE   &kp DLLR   &kp HASH        &kp PIPE         &kp AMPS         &kp CARET            &kp PRCNT   &MOD_FSLH_BSLH   &kp ASTRK        &kp SQT     &kp DQT          &none   &trans
        // row 2
        &trans      &none      &kp AT          &kp EXCL         &kp QMARK        &none                &kp EQUAL   &kp MINUS        &kp PLUS         &kp COLON   &kp SEMI         &trans
        // row 3
        &trans      &none      &MR_NUMBER_RU   &MOD_LBRC_LBKT   &MOD_RBRC_RBKT   &none                &none       &MOD_LPAR_LT     &MOD_RPAR_GT     &none       &MOD_LBRC_LBKT   &MOD_RBRC_RBKT
        // thumb row
        &trans   &trans   &trans                                                                      &trans   &trans   &trans
      >;
    };
    
    LR_NAV {
      bindings = <
        // row 1
&none   &trans   &trans   &trans    &trans    &trans   &trans            &kp PG_UP   &kp HOME   &kp UP     &kp END      &kp C_NEXT   &none   &trans
        // row 2
        &trans   &trans   &trans    &trans    &trans   &trans            &kp PG_DN   &kp LEFT   &kp DOWN   &kp RIGHT    &kp C_PREV   &trans
        // row 3
        &trans   &trans   &trans    &trans    &trans   &trans            &none        &none      &none      &kp K_APP   &trans       &trans   
        // thumb row
        &trans   &trans   &trans                                         &trans   &trans   &trans
      >;
    };
    
    LR_SERVICE {
      bindings = <
        // row 1
&none   &trans       &none   &none          &none          &none          &none            &to LR_GAME1   &kp C_PP     &kp C_PREV     &kp C_NEXT     &none   &kp DEL   &trans
        // row 2
        &bt BT_CLR   &none   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_SEL 5   &none            &none          &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none   &none
        // row 3
        &trans       &none   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none            &none          &none        &kp C_BRI_DN   &kp C_BRI_UP   &none   &kp PSCRN
        // thumb row
        &trans   &trans   &trans                                                           &trans   &trans   &trans
      >;
    };
    
    LR_GAME1 {
      bindings = <
        // row 1
&none   &trans    &kp Q   &kp W   &kp E   &kp R   &kp T             &kp Y   &kp U   &kp I       &kp O     &kp P      &kp PLUS   &none
        // row 2
        &kp TAB   &kp A   &kp S   &kp D   &kp F   &kp G             &kp H   &kp J   &kp K       &kp L     &kp SEMI   &trans
        // row 3
        &trans    &kp Z   &kp X   &kp C   &kp V   &kp B             &kp N   &kp M   &kp COMMA   &kp DOT   &kp FSLH   &MR_MAIN_EN
        // thumb row
        &sl LR_GAME2   &kp LSHFT   &kp SPACE                        &sl LR_GAME3   &kp LSHFT   &kp ENTER
      >;
    };
    
    LR_GAME2 {
      bindings = <
        // row 1
&none   &trans   &trans   &kp N1   &kp N2   &kp N3   &trans            &kp GRAVE   &kp F7   &kp F8   &kp F9   &trans    &trans   &none
        // row 2
        &trans   &trans   &kp N4   &kp N5   &kp N6   &trans            &trans      &kp F4   &kp F5   &kp F6   &trans    &trans
        // row 3
        &trans   &trans   &kp N7   &kp N8   &kp N9   &trans            &trans      &kp F1   &kp F2   &kp F3   &trans    &trans
        // thumb row
        &kp ENTER  &trans   &trans                                     &trans   &trans   &trans
      >;
    };
    
    LR_GAME3 {
      bindings = <
        // row 1
&none   &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans     &kp UP     &trans      &trans   &trans   &none
        // row 2
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &kp LEFT   &kp DOWN   &kp RIGHT   &trans   &trans
        // row 3
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans     &trans     &trans      &trans   &kp GRAVE
        // thumb row
        &trans  &trans   &trans                                        &kp SPACE   &trans   &trans
      >;
    };
  };
};
